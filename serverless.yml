org: hunguit
app: aws-node-express-api-project
service: aws-node-express-api-project

frameworkVersion: '2'


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: ap-southeast-1
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/Tasks'

functions:
  getAllTasks: # Tên function
    handler: handler.getAllTasks # Function để handle event
    events: # Khai báo event
      - http: # Do là API nên event sẽ thuộc dạng HTTP
          path: /tasks # đường dẫn API
          method: get # method cho phép để trigger function
          cors: true
          authorizer: authorize
  createTask:
    handler: handler.createTask
    events:
      - http:
          path: /tasks
          method: post
          cors: true
          authorizer: authorize
  getTaskById:
    handler: handler.getTaskById
    events:
      - http:
          path: /tasks/{id}
          method: get
          cors: true
          authorizer: authorize
  updateTaskById:
    handler: handler.updateTaskById
    events:
      - http:
          path: /tasks/{id}
          method: put
          cors: true
          authorizer: authorize
  deleteTaskById:
    handler: handler.deleteTaskById
    events:
      - http:
          path: /tasks/{id}
          method: delete
          cors: true
          authorizer: authorize
  searchTaskByNote:
    handler: handler.searchTaskByNote
    events:
      - http:
          path: /tasks/search
          method: get
          cors: true
          authorizer: authorize
  importTask:
    handler: 
      handler.importTask
    events:
      - http:
          path: tasks/import
          method: post
          cors: true
          authorizer: authorize
  graphql:
    handler: handler.graphql
    events:
      - http:
          path: /graphql
          method: post
  register:
    handler: 
      handler.register
    events:
      - http:
          path: auth/register
          method: post
  verifyEmail:
    handler: 
      handler.verifyEmail
    events:
      - http:
          path: auth/register/verify/{token}
          method: get
  login:
    handler: 
      handler.login
    events:
      - http:
          path: auth/login
          method: post
  logout:
    handler: 
      handler.logout
    events:
      - http:
          path: auth/logout
          method: get
          authorizer: authorize
  # getUserByEmail:
  #   handler: 
  #     handler.getUserByEmail
  #   events:
  #     - http:
  #         path: /users/{userEmail}
  #         method: get
  #         cors: true
  #         authorizer: authorize
  myAccount:
    handler: 
      handler.myAccount
    events:
      - http:
          path: /my-account
          method: get
          cors: true
          authorizer: authorize
  report:
    handler: 
      handler.report
    events:
      - http:
          path: report/_countBy/{collection}/{field}
          method: get
          cors: true
          authorizer: authorize
  authorize:
    handler: authorizer.authorize

resources:
  Resources:
    MegaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: queryableIndex
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: queryableField
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: MegaTable

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function
